extern mod sdl2;
use std::rt::io::Timer;

mod io;
mod render;
mod video;
mod world;


fn player_handler() {

}

#[start]
fn start(argc: int, argv: **u8) -> int {
    std::rt::start_on_main_thread(argc, argv, main)
}

#[main]
fn main() {
    do spawn {
        player_handler();
    }

    let (timing_port, timing_chan) = std::comm::stream();
    let shared_timing_port = std::comm::SharedPort::new(timing_port);
    let timing_chan_cell = std::cell::Cell::new(timing_chan);

    let (world_state_port, world_state_chan): (Port<int>, Chan<int>) = std::comm::stream();
    let world_state_chan_cell = std::cell::Cell::new(world_state_chan);

    let timing_port = shared_timing_port.clone();
    do spawn {
        let timing_port = timing_port.clone();
        world::world_handler(timing_port, world_state_chan_cell.take())
    }

    let (port, io_chan): (Port<int>, Chan<int>) = std::comm::stream();
    let io_chan_cell = std::cell::Cell::new(io_chan);

    do spawn {
        io::io_handler(io_chan_cell.take());
    }

    let (port, chan): (Port<int>, Chan<int>) = std::comm::stream();
    let port_cell = std::cell::Cell::new(port);
    let chan_cell = std::cell::Cell::new(chan);

    let timing_port = shared_timing_port.clone();
    do spawn {
        let timing_port = timing_port.clone();
        render::rendering_handler(timing_port, chan_cell.take());
    }

    do spawn {
        let mut timer = Timer::new().unwrap();
        let periodic = timer.periodic(16);
        let timing_chan = timing_chan_cell.take();
        loop {
            let tick = periodic.recv();
            timing_chan.send(0);
        }
    }

    video::main(port_cell.take());
}