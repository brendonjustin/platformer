extern mod sdl2;
extern mod extra;

use std::rt::io::Timer;
use extra::comm::DuplexStream;

mod camera;
mod geometry;
mod player;
mod render;
mod video;
mod world;


#[start]
fn start(argc: int, argv: **u8) -> int {
    std::rt::start_on_main_thread(argc, argv, main)
}

#[main]
fn main() {
    let (timing_port, timing_chan): (Port<()>, Chan<()>) = std::comm::stream();
    let shared_timing_port = std::comm::SharedPort::new(timing_port);
    let timing_chan_cell = std::cell::Cell::new(timing_chan);

    let (world_state_server, world_state_client): (DuplexStream<world::WorldState, ()>, DuplexStream<(), world::WorldState>) = DuplexStream();
    let wss_cell = std::cell::Cell::new(world_state_server);

    let world_timing_port = shared_timing_port.clone();
    do spawn {
        let world_timing_port = world_timing_port.clone();
        let player = ~player::Player::new(geometry::Size::new(48.0,48.0));
        let player_pos = geometry::Point::new(10.0,10.0);
        let player_state = ~player::PlayerState::new(player, player_pos, ~"./player.bmp");
        world::world_handler(world_timing_port.clone(), player_state, wss_cell.take());
    }

    let (io_port, io_chan): (Port<int>, Chan<int>) = std::comm::stream();
    let io_chan_cell = std::cell::Cell::new(io_chan);

    do spawn {
        let mut timer = Timer::new().unwrap();
        let periodic = timer.periodic(16);
        let timing_chan = timing_chan_cell.take();
        loop {
            let tick = periodic.recv();
            timing_chan.send(tick);
        }
    }

    video::main(io_chan_cell.take(), world_state_client);
}